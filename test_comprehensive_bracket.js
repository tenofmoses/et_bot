// Comprehensive test for tournament bracket logic from 5 to 30 players

function testTournamentBracket(playerCount) {
    console.log(`\n=== –¢–ï–°–¢ ${playerCount} –ò–ì–†–û–ö–û–í ===`);
    
    const totalRounds = Math.ceil(Math.log2(playerCount));
    
    // Determine if we need a bye player
    let needsByePlayer = false;
    let currentPlayerCount = playerCount;
    
    // Check if any round will have odd number of winners
    let tempWinners = Math.floor(playerCount / 2);
    while (tempWinners > 1) {
        if (tempWinners % 2 === 1) {
            needsByePlayer = true;
            break;
        }
        tempWinners = Math.floor(tempWinners / 2);
    }
    
    // If odd number of players OR even players that create odd winners, use bye
    if (playerCount % 2 === 1 || needsByePlayer) {
        currentPlayerCount = playerCount - 1;
        console.log(`‚úì Bye player: 1 –∏–≥—Ä–æ–∫ (${playerCount % 2 === 1 ? '–Ω–µ—á–µ—Ç–Ω–æ–µ' : '—á–µ—Ç–Ω–æ–µ‚Üí–Ω–µ—á–µ—Ç–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏'})`);
    } else {
        console.log('‚úì Bye player –Ω–µ –Ω—É–∂–µ–Ω');
    }
    
    // First round
    const firstRoundMatches = currentPlayerCount / 2;
    console.log(`–†–∞—É–Ω–¥ 1: ${firstRoundMatches} –º–∞—Ç—á–µ–π (${currentPlayerCount} –∏–≥—Ä–æ–∫–æ–≤)`);
    
    // Validate first round
    if (firstRoundMatches % 1 !== 0) {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: –î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ!`);
        return false;
    }
    
    // Calculate when bye player should join
    let byeRound = -1;
    if (playerCount % 2 === 1 || needsByePlayer) {
        let winnersCount = firstRoundMatches;
        
        for (let round = 1; round < totalRounds; round++) {
            if ((winnersCount + 1) % 2 === 0) {
                byeRound = round;
                console.log(`‚úì Bye player –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –≤ —Ä–∞—É–Ω–¥–µ ${round + 1}`);
                break;
            }
            winnersCount = Math.ceil(winnersCount / 2);
        }
        
        if (byeRound === -1) {
            console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞—É–Ω–¥ –¥–ª—è bye player!`);
            return false;
        }
    }
    
    // Simulate subsequent rounds
    let currentWinners = firstRoundMatches;
    let hasErrors = false;
    
    for (let round = 1; round < totalRounds; round++) {
        if (round === byeRound) {
            currentWinners += 1;
            console.log(`–†–∞—É–Ω–¥ ${round + 1}: ${Math.ceil(currentWinners / 2)} –º–∞—Ç—á–µ–π (${currentWinners} –∏–≥—Ä–æ–∫–æ–≤, –≤–∫–ª—é—á–∞—è bye)`);
        } else {
            console.log(`–†–∞—É–Ω–¥ ${round + 1}: ${Math.ceil(currentWinners / 2)} –º–∞—Ç—á–µ–π (${currentWinners} –∏–≥—Ä–æ–∫–æ–≤)`);
        }
        
        // Check for issues
        if (currentWinners > 2 && currentWinners % 2 === 1 && round !== byeRound) {
            console.log(`  ‚ö†Ô∏è –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (${currentWinners}) –±–µ–∑ bye - –Ω—É–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥`);
        }
        
        const nextMatches = Math.ceil(currentWinners / 2);
        if (nextMatches % 1 !== 0) {
            console.log(`  ‚ùå –û–®–ò–ë–ö–ê: –î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π!`);
            hasErrors = true;
        }
        
        currentWinners = nextMatches;
    }
    
    // Final validation
    if (currentWinners !== 1) {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: –§–∏–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 1 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –ø–æ–ª—É—á–∏–ª–∏ ${currentWinners}`);
        hasErrors = true;
    }
    
    if (!hasErrors) {
        console.log(`‚úÖ –ö–û–†–†–ï–ö–¢–ù–û: ${totalRounds} —Ä–∞—É–Ω–¥–æ–≤, —Ñ–∏–Ω–∞–ª —Å 1 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º`);
    }
    
    return !hasErrors;
}

// Test all player counts from 5 to 30
console.log('–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò');
console.log('==========================================');

let successCount = 0;
let totalTests = 0;
const failedTests = [];

for (let players = 5; players <= 30; players++) {
    totalTests++;
    const success = testTournamentBracket(players);
    if (success) {
        successCount++;
    } else {
        failedTests.push(players);
    }
    console.log('-'.repeat(50));
}

console.log('\n=== –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
console.log(`–£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalTests}`);
console.log(`–ù–µ—É–¥–∞—á–Ω–æ: ${totalTests - successCount}`);

if (failedTests.length > 0) {
    console.log(`–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤: ${failedTests.join(', ')}`);
} else {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
}

// Test specific edge cases
console.log('\n=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ ===');
const edgeCases = [2, 3, 4, 32, 64, 100];
edgeCases.forEach(players => {
    console.log(`\n–¢–µ—Å—Ç ${players} –∏–≥—Ä–æ–∫–æ–≤:`);
    testTournamentBracket(players);
});
