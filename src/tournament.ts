import TelegramBot from 'node-telegram-bot-api';
import {
  createTournamentBracket,
  collectWinnersOfRound,
  addByeIfJoiningThisRound,
  applyPlayersToRound,
  isRoundCompleted,
  pickByeConsideringEntrants,
} from './bracket';

import {
  sendMessageWithRetry,
  editMessageWithRetry,
  buildTournamentHeader,
  sendTournamentBracket,
  announceRoundTransition,
  announceByeJoins,
  announceAutoAdvance,
  promptMatch,
} from './messaging';

import { Tournament } from './types';

/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞.
 * –î–µ—Ä–∂–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ chatId, —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback-–∫–ª–∏–∫–∏,
 * –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ç–∫—É, –ø—Ä–æ–≤–æ–¥–∏—Ç –º–∞—Ç—á–∏ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
 */
export class TournamentService {
  private telegramBot: TelegramBot;
  private activeTournamentsByChatId = new Map<number, Tournament>();

  private hasPlayerOneThrownByChatId = new Map<number, boolean>();
  private hasPlayerTwoThrownByChatId = new Map<number, boolean>();

  constructor(bot: TelegramBot) {
    this.telegramBot = bot;
  }

  onMessage = (message: TelegramBot.Message) => {
    const chatId = message.chat.id;
    const messageText = message.text?.toLowerCase().trim();
    if (messageText === '—Ç—É—Ä–Ω–∏—Ä') {
      this.startTournament(chatId, message.from, undefined, message.message_thread_id);
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
   * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π/–≤—ã—Ö–æ–¥–æ–º, —Å—Ç–∞—Ä—Ç–æ–º/–æ—Ç–º–µ–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–∞,
   * –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ ¬´–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫¬ª.
   */
  onCallback = async (callbackQuery: TelegramBot.CallbackQuery) => {
    const chatId = callbackQuery.message?.chat.id;
    if (!chatId) return;

    const telegramUserId = callbackQuery.from.id;
    const callbackData = callbackQuery.data;
    const displayUserName = callbackQuery.from.username
      ? `@${callbackQuery.from.username}`
      : callbackQuery.from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

    try {
      switch (callbackData) {
        case 'join_tournament': {
          const tournament = this.activeTournamentsByChatId.get(chatId);
          if (!tournament) {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!' });
          }
          if (tournament.participants.has(telegramUserId)) {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!' });
          }

          tournament.participants.add(telegramUserId);
          tournament.participantNames.set(telegramUserId, displayUserName);
          await this.updateTournamentMessage(chatId);
          return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!' });
        }

        case 'leave_tournament': {
          const tournament = this.activeTournamentsByChatId.get(chatId);
          if (!tournament || !tournament.participants.has(telegramUserId)) {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!' });
          }
          if (tournament.gameState === 'playing') {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞!' });
          }

          tournament.participants.delete(telegramUserId);
          tournament.participantNames.delete(telegramUserId);
          await this.updateTournamentMessage(chatId);
          return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞!' });
        }

        case 'cancel_tournament': {
          const tournament = this.activeTournamentsByChatId.get(chatId);
          if (!tournament) {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!' });
          }
          if (tournament.organizerId !== telegramUserId) {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä!' });
          }

          tournament.gameState = 'cancelled';
          await editMessageWithRetry(this.telegramBot, chatId, tournament.messageId, 'üö´ –¢–£–†–ù–ò–† –û–¢–ú–ï–ù–ï–ù\n\n–¢—É—Ä–Ω–∏—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.');
          this.activeTournamentsByChatId.delete(chatId);
          return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–¢—É—Ä–Ω–∏—Ä –æ—Ç–º–µ–Ω–µ–Ω!' });
        }

        case 'start_game': {
          const tournament = this.activeTournamentsByChatId.get(chatId);
          if (!tournament || tournament.organizerId !== telegramUserId) {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä!' });
          }
          if (tournament.participants.size < 1) {
            return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —É—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!' });
          }

          await this.startTournamentBracket(chatId);
          return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!' });
        }

        case 'throw_dice': {
          const wasAccepted = await this.handleDiceThrow(chatId, telegramUserId, displayUserName);
          return await this.telegramBot.answerCallbackQuery(callbackQuery.id, {
            text: wasAccepted ? '–ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω!' : '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ —Å–µ–π—á–∞—Å!',
          });
        }

        default: {
          return await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.' });
        }
      }
    } catch {
      await this.telegramBot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!' });
    }
  };


  /**
   * –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: –ø—É–±–ª–∏–∫—É–µ—Ç —à–∞–ø–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
   */
  private async startTournament(
    chatId: number,
    telegramUser: TelegramBot.User | undefined,
    startTime?: string,
    messageThreadId?: number
  ) {
    if (!telegramUser) return;
    if (this.activeTournamentsByChatId.has(chatId)) {
      await this.telegramBot.sendMessage(
        chatId,
        ' –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç —Ç—É—Ä–Ω–∏—Ä! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
        { message_thread_id: messageThreadId }
      );
      return;
    }

    const initiatorDisplayName = telegramUser.username ? `@${telegramUser.username}` : telegramUser.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    let tournamentHeaderText = ` –¢–£–†–ù–ò–† –ù–ê–ß–ê–õ–°–Ø! \n\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${initiatorDisplayName}`;
    if (startTime) tournamentHeaderText += `\n –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${startTime}`;
    tournamentHeaderText += `\n\n –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n_–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç_\n\n –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`;

    const inlineKeyboard: TelegramBot.InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: 'üéÆ –£—á–∞—Å—Ç–≤—É—é!', callback_data: 'join_tournament' },
          { text: '‚ùå –í—ã–π—Ç–∏', callback_data: 'leave_tournament' },
        ],
        [
          { text: 'üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: 'start_game' },
          { text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä', callback_data: 'cancel_tournament' },
        ],
      ],
    };

    const headerMessage = await sendMessageWithRetry(this.telegramBot, chatId, tournamentHeaderText, {
      reply_markup: inlineKeyboard,
      message_thread_id: messageThreadId,
    });

    this.activeTournamentsByChatId.set(chatId, {
      messageId: headerMessage.message_id,
      messageThreadId,
      participants: new Set<number>(),
      participantNames: new Map<number, string>(),
      organizerId: telegramUser.id,
      organizerName: initiatorDisplayName,
      gameState: 'registration',
      startTime,
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç ¬´—à–∞–ø–∫—É¬ª —Ç—É—Ä–Ω–∏—Ä–∞: —Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏.
   */
  private async updateTournamentMessage(chatId: number) {
    const tournament = this.activeTournamentsByChatId.get(chatId);
    if (!tournament) return;

    const inlineButtons: TelegramBot.InlineKeyboardButton[][] = [];
    if (tournament.gameState === 'registration') {
      inlineButtons.push([
        { text: 'üéÆ –£—á–∞—Å—Ç–≤—É—é!', callback_data: 'join_tournament' },
        { text: '‚ùå –í—ã–π—Ç–∏', callback_data: 'leave_tournament' },
      ]);
      inlineButtons.push([
        { text: 'üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: 'start_game' },
        { text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä', callback_data: 'cancel_tournament' },
      ]);
    } else if (tournament.gameState === 'playing' && tournament.bracket && tournament.currentRound !== undefined && tournament.currentMatch !== undefined) {
      const currentMatch = tournament.bracket.rounds[tournament.currentRound].matches[tournament.currentMatch];
      if (!currentMatch.completed && currentMatch.player2) {
        const needPlayerOneRoll = currentMatch.player1.roll === undefined;
        const needPlayerTwoRoll = currentMatch.player2.roll === undefined;
        if (needPlayerOneRoll || needPlayerTwoRoll) {
          inlineButtons.push([{ text: 'üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫', callback_data: 'throw_dice' }]);
        }
      }
    }

    const inlineKeyboard: TelegramBot.InlineKeyboardMarkup = { inline_keyboard: inlineButtons };
    await editMessageWithRetry(this.telegramBot, chatId, tournament.messageId, buildTournamentHeader(tournament), { reply_markup: inlineKeyboard });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É: —Å–æ–∑–¥–∞—ë—Ç –ø–∞—Ä—ã –Ω–∞ 1-–π —Ä–∞—É–Ω–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–º—É –º–∞—Ç—á—É.
   */
  private async startTournamentBracket(chatId: number) {
    const tournament = this.activeTournamentsByChatId.get(chatId);
    if (!tournament) return;

    tournament.bracket = createTournamentBracket(tournament.participantNames);
    tournament.currentRound = 0;
    tournament.currentMatch = 0;
    tournament.gameState = 'playing';

    await this.updateTournamentMessage(chatId);
    await this.startNextMatch(chatId);
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º—É –º–∞—Ç—á—É –∏–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É.
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ –º–∞—Ç—á–∏ (–∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥) –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞.
   */
  private async startNextMatch(chatId: number): Promise<void> {
    const tournament = this.activeTournamentsByChatId.get(chatId);
    if (!tournament || !tournament.bracket) return;

    // –û—á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥–∏ ¬´–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞¬ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞
    this.clearCurrentMatchDiceFlags(chatId);

    const currentRound = tournament.bracket.rounds[tournament.currentRound!];
    const currentMatch = currentRound.matches[tournament.currentMatch!];

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á ‚Äî —Å–¥–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
    if (!currentMatch || currentMatch.completed) {
      tournament.currentMatch! += 1;

      // –î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞
      if (tournament.currentMatch! >= currentRound.matches.length) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –º–∞—Ç—á–∏ ‚Äî –ø—Ä—ã–≥–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π
        if (!isRoundCompleted(currentRound)) {
          const firstIncompleteIndex = currentRound.matches.findIndex(m => !m.completed);
          if (firstIncompleteIndex !== -1) {
            tournament.currentMatch = firstIncompleteIndex;
            return this.startNextMatch(chatId);
          }
          return;
        }

        // –†–∞—É–Ω–¥ –∑–∞–∫—Ä—ã—Ç ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
        tournament.currentRound! += 1;
        tournament.currentMatch = 0;

        // –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω
        if (tournament.currentRound! >= tournament.bracket.totalRounds) {
          return this.finishTournament(chatId);
        }

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
        await this.advanceWinnersToNextRound(chatId);
        return;
      }

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —à–∞–≥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
      return this.startNextMatch(chatId);
    }

    // –û–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á ‚Üí –∞–≤—Ç–æ–ø–æ–±–µ–¥–∞
    if (!currentMatch.player2) {
      currentMatch.winner = currentMatch.player1;
      currentMatch.completed = true;

      await announceAutoAdvance(this.telegramBot, chatId, tournament, currentMatch.player1.name);
      await this.updateTournamentMessage(chatId);
      setTimeout(() => this.startNextMatch(chatId), 600);
      return;
    }

    // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –º–∞—Ç—á ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫¬ª
    await promptMatch(this.telegramBot, chatId, tournament, tournament.currentMatch! + 1);
  }

  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª–∏–∫ ¬´–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫¬ª.
   * –î–µ–ª–∞–µ—Ç –∫–ª–∏–∫ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º –¥–ª—è —Ç–æ–≥–æ –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: —Ñ–ª–∞–≥ —Å—Ç–∞–≤–∏—Ç—Å—è –¥–æ await.
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ª–∏–±–æ –∂–¥—ë—Ç –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–æ—Å–∫–∞, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞—Ç—á.
   */
  private async handleDiceThrow(chatId: number, telegramUserId: number, displayUserName: string): Promise<boolean> {
    const tournament = this.activeTournamentsByChatId.get(chatId);
    if (!tournament || !tournament.bracket) return false;

    const currentRound = tournament.bracket.rounds[tournament.currentRound!];
    const currentMatch = currentRound.matches[tournament.currentMatch!];

    if (!currentMatch.player2) return false;
    if (currentMatch.completed) return false;

    const isPlayerOne = currentMatch.player1.id === telegramUserId;
    const isPlayerTwo = currentMatch.player2.id === telegramUserId;
    if (!isPlayerOne && !isPlayerTwo) return false;

    // –ò–≥—Ä–æ–∫ —É–∂–µ –Ω–∞–∂–∏–º–∞–ª –∫–Ω–æ–ø–∫—É –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ ‚Äî –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫
    if (isPlayerOne && this.hasPlayerOneThrownByChatId.get(chatId)) return false;
    if (isPlayerTwo && this.hasPlayerTwoThrownByChatId.get(chatId)) return false;

    // –ü–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ
    if ((isPlayerOne && currentMatch.player1.roll !== undefined) ||
      (isPlayerTwo && currentMatch.player2!.roll !== undefined)) {
      return false;
    }

    // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –¥–æ –ª—é–±—ã—Ö await ‚Äî —ç—Ç–æ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫ —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞
    if (isPlayerOne) this.hasPlayerOneThrownByChatId.set(chatId, true);
    else this.hasPlayerTwoThrownByChatId.set(chatId, true);

    try {
      await this.telegramBot.sendMessage(chatId, `üé≤ ${displayUserName} –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫...`, { message_thread_id: tournament.messageThreadId });
      const diceMessage = await this.telegramBot.sendDice(chatId, { emoji: 'üé≤', message_thread_id: tournament.messageThreadId });

      // –ü–æ —Ñ–∞–∫—Ç—É Telegram –æ—Ç–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ‚Äî —á–∏—Ç–∞–µ–º —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
      setTimeout(async () => {
        try {
          const diceValue = diceMessage.dice?.value ?? (Math.floor(Math.random() * 6) + 1);
          if (isPlayerOne) currentMatch.player1.roll = diceValue;
          else currentMatch.player2!.roll = diceValue;

          const bothPlayersRolled = currentMatch.player1.roll !== undefined && currentMatch.player2!.roll !== undefined;

          if (bothPlayersRolled) {
            await this.resolveMatch(chatId);
          } else {
            await this.updateTournamentMessage(chatId);
          }
        } catch {
          // –û—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ –Ω–µ –æ—Ç–∫–∞—Ç—ã–≤–∞—é—Ç —Ñ–ª–∞–≥ ‚Äî –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ ¬´–Ω–∞–∫–ª–∏–∫–∞—Ç—å¬ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫.
        }
      }, 4000);

      return true;
    } catch {
      // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/–∫—É–±–∏–∫ ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
      if (isPlayerOne) this.hasPlayerOneThrownByChatId.delete(chatId);
      else this.hasPlayerTwoThrownByChatId.delete(chatId);
      return false;
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞—Ç—á, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –æ–±–∞ –±—Ä–æ—Å–∫–∞.
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∏—á—å—é (—Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞) –∏–ª–∏ –æ–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –¥–≤–∏–≥–∞–µ—Ç—Å—è –¥–∞–ª—å—à–µ.
   */
  private async resolveMatch(chatId: number) {
    const tournament = this.activeTournamentsByChatId.get(chatId);
    if (!tournament || !tournament.bracket) return;

    const currentRound = tournament.bracket.rounds[tournament.currentRound!];
    const currentMatch = currentRound.matches[tournament.currentMatch!];

    const playerOneRoll = currentMatch.player1.roll!;
    const playerTwoRoll = currentMatch.player2!.roll!;

    if (playerOneRoll === playerTwoRoll) {
      await this.telegramBot.sendMessage(
        chatId,
        `ü§ù –ù–ò–ß–¨–Ø! (${playerOneRoll} - ${playerTwoRoll})\n\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥ –∑–∞–Ω–æ–≤–æ!`,
        { message_thread_id: tournament.messageThreadId }
      );
      currentMatch.player1.roll = undefined;
      currentMatch.player2!.roll = undefined;

      // –°–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –±—Ä–æ—Å–∫–∏ –æ–±–µ–∏–º —É—á–∞—Å—Ç–Ω–∏—Ü–∞–º
      this.clearCurrentMatchDiceFlags(chatId);

      await promptMatch(this.telegramBot, chatId, tournament, tournament.currentMatch! + 1);
      return;
    }

    currentMatch.winner = playerOneRoll > playerTwoRoll ? currentMatch.player1 : currentMatch.player2!;
    currentMatch.completed = true;

    await sendMessageWithRetry(
      this.telegramBot,
      chatId,
      `üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –ú–ê–¢–ß–ê: ${currentMatch.winner.name}!\n\n${currentMatch.player1.name}: ${playerOneRoll}\n${currentMatch.player2!.name}: ${playerTwoRoll}`,
      { message_thread_id: tournament.messageThreadId }
    );

    // –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
    this.clearCurrentMatchDiceFlags(chatId);

    setTimeout(() => this.startNextMatch(chatId), 800);
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ ¬´—ç—Ç–∏ –¥–≤–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã —É–∂–µ –Ω–∞–∂–∏–º–∞–ª–∏ –∫–Ω–æ–ø–∫—É¬ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞ –∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–Ω–∏—á—å–µ–π.
   */
  private clearCurrentMatchDiceFlags(chatId: number): void {
    this.hasPlayerOneThrownByChatId.delete(chatId);
    this.hasPlayerTwoThrownByChatId.delete(chatId);
  }

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ —Ç–µ–∫—É—â–∏–π.
   * –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–∏—Ä–∞–µ—Ç bye-–∏–≥—Ä–æ–∫–∞ –∏ ¬´–≤–∫–ª–µ–∏–≤–∞–µ—Ç¬ª –µ–≥–æ –≤ –Ω—É–∂–Ω—ã–π —Ä–∞—É–Ω–¥,
   * –∞ –∑–∞—Ç–µ–º –ø—É–±–ª–∏–∫—É–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–µ—Ç–∫—É –∏ –¥–≤–∏–≥–∞–µ—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ç—á—É.
   */
  private async advanceWinnersToNextRound(chatId: number) {
    const tournament = this.activeTournamentsByChatId.get(chatId);
    if (!tournament || !tournament.bracket) return;

    // –ï—Å–ª–∏ —É–∂–µ –≤—ã—à–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    if (tournament.currentRound! >= tournament.bracket.totalRounds) {
      return this.finishTournament(chatId);
    }

    const previousRound = tournament.bracket.rounds[tournament.currentRound! - 1];
    const currentRound = tournament.bracket.rounds[tournament.currentRound!];
    const currentRoundIndex = tournament.currentRound!;

    // 1) –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    const winners = collectWinnersOfRound(previousRound);

    // 2) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Ç–µ—Ö, –∫–æ–º—É ¬´–≤–∫–ª–µ–π–∫–∞¬ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–º–µ–Ω–Ω–æ –≤ –≠–¢–û–¢ —Ä–∞—É–Ω–¥
    const entrantsAfterJoin = addByeIfJoiningThisRound(
      winners,
      tournament.bracket,
      currentRoundIndex
    );

    // 3) –ï—Å–ª–∏ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–µ—á—ë—Ç–Ω–æ –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ ¬´–≤–∫–ª–µ–π–∫–∞¬ª ‚Äî
    // —Å–Ω–∏–º–∞–µ–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ bye –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    const { playersToPlace, byePicked, joinRoundIndex } = pickByeConsideringEntrants(
      entrantsAfterJoin,
      tournament.bracket,
      currentRoundIndex
    );
    if (byePicked !== undefined && joinRoundIndex !== undefined) {
      tournament.bracket.byePlayersByJoinRound.set(joinRoundIndex, byePicked);
    }

    await announceRoundTransition(this.telegramBot, chatId, tournament);

    // –°–æ–æ–±—â–∞–µ–º –æ ¬´–≤–∫–ª–µ–π–∫–µ¬ª, –µ—Å–ª–∏ –≤ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
    if (tournament.bracket.byePlayersByJoinRound.has(currentRoundIndex)) {
      await announceByeJoins(this.telegramBot, chatId, tournament);
    }

    // 4) –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–∞—Ç—á–∞–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    applyPlayersToRound(currentRound, playersToPlace);

    await sendTournamentBracket(this.telegramBot, chatId, tournament);
    await this.updateTournamentMessage(chatId);
    setTimeout(() => this.startNextMatch(chatId), 600);
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä: –æ–±—ä—è–≤–ª—è–µ—Ç —á–µ–º–ø–∏–æ–Ω–∞, –≤—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
   * –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
   */
  private async finishTournament(chatId: number) {
    const tournament = this.activeTournamentsByChatId.get(chatId);
    if (!tournament || !tournament.bracket) return;

    const { rounds, totalRounds, byePlayersByJoinRound } = tournament.bracket;

    const finalRound = rounds[totalRounds - 1];
    const finalMatch = finalRound.matches[0];
    const championPlayer = finalMatch.winner ?? finalMatch.player1;

    tournament.gameState = 'finished';
    await this.updateTournamentMessage(chatId);

    let resultsText = `üéâ –¢–£–†–ù–ò–† –ó–ê–í–ï–†–®–ï–ù! üéâ\n\nüëë –ß–ï–ú–ü–ò–û–ù: ${championPlayer.name}! üëë\n\n`;
    resultsText += 'üèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê üèÜ\n\n';

    // –í—ã–≤–µ–¥–µ–º –≤—Å–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Å—Ç–æ—è–≤—à–∏–µ—Å—è ¬´–≤–∫–ª–µ–π–∫–∏¬ª bye –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–æ–º–µ—Ä–æ–≤ —Ä–∞—É–Ω–¥–æ–≤
    if (byePlayersByJoinRound && byePlayersByJoinRound.size > 0) {
      const byeLines = Array.from(byePlayersByJoinRound.entries())
        .sort(([a], [b]) => a - b)
        .map(([joinRoundIndex, player]) => `üéØ ${player.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤ —Ä–∞—É–Ω–¥–µ ${joinRoundIndex + 1}`);
      resultsText += byeLines.join('\n') + '\n\n';
    }

    resultsText += rounds
      .map((round, roundIndex) => {
        const lines = round.matches.map(match => {
          const status = '‚úÖ';
          if (match.player1.name === 'TBD' || (match.player2 && match.player2.name === 'TBD')) {
            return `${status} –û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
          }
          if (!match.player2) {
            return `${status} ${match.player1.name} (–æ–¥–∏–Ω–æ—á–Ω—ã–π)` + (match.winner ? ` ‚Üí üèÜ ${match.winner.name}` : '');
          }
          return `${status} ${match.player1.name} vs ${match.player2.name}` + (match.winner ? ` ‚Üí üèÜ ${match.winner.name}` : '');
        });
        return `–†–∞—É–Ω–¥ ${roundIndex + 1}:\n${lines.join('\n')}`;
      })
      .join('\n\n');

    await this.telegramBot.sendMessage(chatId, resultsText, { message_thread_id: tournament.messageThreadId });

    setTimeout(() => {
      this.activeTournamentsByChatId.delete(chatId);
    }, 800);
  }

}
