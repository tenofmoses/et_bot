import TelegramBot from 'node-telegram-bot-api';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) {
    console.error('TELEGRAM_BOT_TOKEN is not set in environment variables');
    process.exit(1);
}

// Create a bot that uses 'polling' to fetch new updates
const bot = new TelegramBot(token, { polling: true });

// Store active tournaments by chat ID
interface Tournament {
    messageId: number;
    participants: Set<number>;
    participantNames: Map<number, string>;
}

const activeTournaments = new Map<number, Tournament>();

console.log('üé≤ Dice Bot started successfully!');

// Listen for any kind of message
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    console.log(`Received message from ${msg.from?.username || msg.from?.first_name}: ${messageText}`);

    // Handle /start command
    if (messageText === '/start') {
        const welcomeText = msg.chat.type === 'private' 
            ? 'üé≤ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤!\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/dice - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–ø–∏—à–∏ "—Ç—É—Ä–Ω–∏—Ä" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä!'
            : 'üé≤ –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º!\n\n–ù–∞–ø–∏—à–∏—Ç–µ "—Ç—É—Ä–Ω–∏—Ä" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã!';
        
        bot.sendMessage(chatId, welcomeText);
        return;
    }

    // Handle /help command
    if (messageText === '/help') {
        const helpText = msg.chat.type === 'private'
            ? 'üé≤ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/dice - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ (1-6)\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n–í –≥—Ä—É–ø–ø–∞—Ö:\n"—Ç—É—Ä–Ω–∏—Ä" - –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä'
            : 'üé≤ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:\n\n/dice - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n"—Ç—É—Ä–Ω–∏—Ä" - –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É';
        
        bot.sendMessage(chatId, helpText);
        return;
    }

    // Handle tournament trigger
    if (messageText?.toLowerCase().includes('—Ç—É—Ä–Ω–∏—Ä')) {
        startTournament(chatId, msg.from);
        return;
    }

    // Handle /dice command
    if (messageText === '/dice') {
        // Send dice emoji using Telegram's built-in dice feature
        bot.sendDice(chatId, { emoji: 'üé≤' })
            .then(() => {
                console.log(`Sent dice to chat ${chatId}`);
            })
            .catch((error) => {
                console.error('Error sending dice:', error);
                bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞');
            });
        return;
    }

    // Handle unknown commands
    if (messageText?.startsWith('/')) {
        bot.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
        return;
    }
});

// Function to start a tournament
async function startTournament(chatId: number, initiator: TelegramBot.User | undefined) {
    if (!initiator) return;
    
    // Check if there's already an active tournament
    if (activeTournaments.has(chatId)) {
        bot.sendMessage(chatId, '‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç —Ç—É—Ä–Ω–∏—Ä! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
        return;
    }

    const initiatorName = initiator.username ? `@${initiator.username}` : (initiator.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π');
    
    const tournamentMessage = `üèÜ **–¢–£–†–ù–ò–† –ù–ê–ß–ê–õ–°–Ø!** üèÜ\n\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${initiatorName}\n\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n_–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç_\n\nüéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`;
    
    const keyboard = {
        inline_keyboard: [[
            { text: 'üéÆ –£—á–∞—Å—Ç–≤—É—é!', callback_data: 'join_tournament' },
            { text: 'üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: 'start_game' }
        ]]
    };

    try {
        const sentMessage = await bot.sendMessage(chatId, tournamentMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });

        // Store tournament data
        activeTournaments.set(chatId, {
            messageId: sentMessage.message_id,
            participants: new Set(),
            participantNames: new Map()
        });

        console.log(`Tournament started in chat ${chatId} by ${initiatorName}`);
    } catch (error) {
        console.error('Error starting tournament:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
    }
}

// Function to update tournament message
async function updateTournamentMessage(chatId: number) {
    const tournament = activeTournaments.get(chatId);
    if (!tournament) return;

    const participantsList = tournament.participants.size > 0 
        ? Array.from(tournament.participantNames.values()).map((name, index) => `${index + 1}. ${name}`).join('\n')
        : '_–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç_';

    const updatedMessage = `üèÜ **–¢–£–†–ù–ò–†** üèÜ\n\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ (${tournament.participants.size}):**\n${participantsList}\n\nüéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`;
    
    const keyboard = {
        inline_keyboard: [[
            { text: 'üéÆ –£—á–∞—Å—Ç–≤—É—é!', callback_data: 'join_tournament' },
            { text: 'üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: 'start_game' }
        ]]
    };

    try {
        await bot.editMessageText(updatedMessage, {
            chat_id: chatId,
            message_id: tournament.messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('Error updating tournament message:', error);
    }
}

// Handle callback queries (button presses)
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message?.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    const userName = callbackQuery.from.username ? `@${callbackQuery.from.username}` : (callbackQuery.from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π');

    if (!chatId) return;

    try {
        if (data === 'join_tournament') {
            const tournament = activeTournaments.get(chatId);
            if (!tournament) {
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!' });
                return;
            }

            if (tournament.participants.has(userId)) {
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!' });
                return;
            }

            // Add participant
            tournament.participants.add(userId);
            tournament.participantNames.set(userId, userName);
            
            await updateTournamentMessage(chatId);
            await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!' });
            
            console.log(`${userName} joined tournament in chat ${chatId}`);
        } else if (data === 'start_game') {
            const tournament = activeTournaments.get(chatId);
            if (!tournament) {
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!' });
                return;
            }

            if (tournament.participants.size < 2) {
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!' });
                return;
            }

            // Start the dice game
            await startDiceGame(chatId);
            await bot.answerCallbackQuery(callbackQuery.id, { text: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!' });
        }
    } catch (error) {
        console.error('Error handling callback query:', error);
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!' });
    }
});

// Function to start dice game
async function startDiceGame(chatId: number) {
    const tournament = activeTournaments.get(chatId);
    if (!tournament) return;

    const participants = Array.from(tournament.participantNames.values());
    
    await bot.sendMessage(chatId, `üé≤ **–ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!** üé≤\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participants.join(', ')}\n\n–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫! –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ!`);
    
    // Roll dice for each participant
    const results: { name: string, roll: number }[] = [];
    
    for (const participantName of participants) {
        const diceMessage = await bot.sendDice(chatId, { emoji: 'üé≤' });
        // Note: In real implementation, you'd need to wait for the dice animation to complete
        // and get the actual result. For now, we'll simulate it.
        const roll = Math.floor(Math.random() * 6) + 1;
        results.push({ name: participantName, roll });
        
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait between rolls
    }
    
    // Determine winner
    const maxRoll = Math.max(...results.map(r => r.roll));
    const winners = results.filter(r => r.roll === maxRoll);
    
    let resultMessage = 'üèÜ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–£–†–ù–ò–†–ê** üèÜ\n\n';
    results.forEach(result => {
        const emoji = result.roll === maxRoll ? 'üëë' : 'üé≤';
        resultMessage += `${emoji} ${result.name}: ${result.roll}\n`;
    });
    
    if (winners.length === 1) {
        resultMessage += `\nüéâ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨: ${winners[0].name}!** üéâ`;
    } else {
        resultMessage += `\nü§ù **–ù–ò–ß–¨–Ø –º–µ–∂–¥—É:** ${winners.map(w => w.name).join(', ')}`;
    }
    
    await bot.sendMessage(chatId, resultMessage);
    
    // Clean up tournament
    activeTournaments.delete(chatId);
    console.log(`Tournament completed in chat ${chatId}`);
}

// Handle polling errors
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

// Handle webhook errors
bot.on('webhook_error', (error) => {
    console.error('Webhook error:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('üõë Shutting down bot...');
    bot.stopPolling();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë Shutting down bot...');
    bot.stopPolling();
    process.exit(0);
});
