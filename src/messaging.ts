// –í–°–Å –ü–†–û –°–û–û–ë–©–ï–ù–ò–Ø: –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤
import TelegramBot from 'node-telegram-bot-api';
import { Tournament, TournamentBracket, Round, Match } from './types';

const DEBUG_MSG = true;

function log(...args: unknown[]) {
  if (DEBUG_MSG) {
    console.debug('[MSG]', ...args);
  }
}

type TelegramApiError = {
  response?: {
    body?: {
      error_code?: number;
      description?: string;
      parameters?: { retry_after?: number };
    };
  };
  message?: string;
};

function isTelegramApiError(e: unknown): e is TelegramApiError {
  return typeof e === 'object' && e !== null && ('message' in e || 'response' in e);
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ—Ç—Ä–∞—è–º–∏.
 * –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏:
 *  - 429 (rate limit): –∂–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω—ã–π Telegram retry_after (–∏–ª–∏ 5—Å).
 *  - –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff (2^attempt —Å–µ–∫—É–Ω–¥).
 */
export async function sendMessageWithRetry(
  bot: TelegramBot,
  chatId: number,
  text: string,
  options: TelegramBot.SendMessageOptions = {},
  maxRetries = 3
): Promise<TelegramBot.Message> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      log(`sendMessage attempt #${attempt}`, { chatId, textPreview: text.slice(0, 60) });
      const result = await bot.sendMessage(chatId, text, options);
      log('sendMessage ok', { messageId: result.message_id });
      return result;
    } catch (error: unknown) {
      const code = isTelegramApiError(error) ? error.response?.body?.error_code : undefined;
      const desc =
        (isTelegramApiError(error) && (error.response?.body?.description || error.message)) ||
        'Unknown error';
      log('sendMessage failed', { attempt, code, desc });

      if (code === 429 && isTelegramApiError(error)) {
        const retryAfter = error.response?.body?.parameters?.retry_after ?? 5;
        log(`rate limited: sleep ${retryAfter}s`);
        await new Promise(res => setTimeout(res, retryAfter * 1000));
      } else if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt) * 1000;
        log(`backoff: sleep ${delay}ms`);
        await new Promise(res => setTimeout(res, delay));
      } else {
        log('sendMessage giving up');
        throw error;
      }
    }
  }
  // –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ, –Ω–æ –¥–ª—è TS
  throw new Error('sendMessageWithRetry: exhausted retries');
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ—Ç—Ä–∞—è–º–∏.
 * –°–ø–µ—Ü-–∫–µ–π—Å: "message is not modified" ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏.
 */
export async function editMessageWithRetry(
  bot: TelegramBot,
  chatId: number,
  messageId: number,
  text: string,
  options: TelegramBot.EditMessageTextOptions = {},
  maxRetries = 3
): Promise<TelegramBot.Message | boolean | null> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      log(`editMessage attempt #${attempt}`, { chatId, messageId, textPreview: text.slice(0, 60) });
      const result = await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
      log('editMessage ok');
      return result;
    } catch (error: unknown) {
      const desc =
        (isTelegramApiError(error) && (error.response?.body?.description || error.message)) || '';
      const code = isTelegramApiError(error) ? error.response?.body?.error_code : undefined;

      if (typeof desc === 'string' && desc.includes('message is not modified')) {
        log('editMessage skipped: not modified');
        return null;
      }

      log('editMessage failed', { attempt, code, desc });

      if (code === 429 && isTelegramApiError(error)) {
        const retryAfter = error.response?.body?.parameters?.retry_after ?? 5;
        log(`rate limited: sleep ${retryAfter}s`);
        await new Promise(res => setTimeout(res, retryAfter * 1000));
      } else if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt) * 1000;
        log(`backoff: sleep ${delay}ms`);
        await new Promise(res => setTimeout(res, delay));
      } else {
        log('editMessage giving up');
        throw error;
      }
    }
  }
  throw new Error('editMessageWithRetry: exhausted retries');
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
export function buildBracketText(tournament: Tournament): string {
  if (!tournament.bracket) return '';
  const bracket: TournamentBracket = tournament.bracket;

  let txt = 'üèÜ –¢–£–†–ù–ò–†–ù–ê–Ø –°–ï–¢–ö–ê üèÜ\n\n';

  // –í—ã–≤–µ—Å—Ç–∏ –ø–ª–∞–Ω/—Ñ–∞–∫—Ç ¬´–≤–∫–ª–µ–µ–∫¬ª bye –ø–æ —Ä–∞—É–Ω–¥–∞–º (0-based -> +1 –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞)
  if (Array.isArray(bracket.byeJoinRounds) && bracket.byeJoinRounds.length > 0) {
    const lines = [...bracket.byeJoinRounds]
      .sort((a, b) => a - b)
      .map((joinIdx) => {
        const p = bracket.byePlayersByJoinRound?.get(joinIdx);
        const who = p ? p.name : '–ò–≥—Ä–æ–∫ —Å bye';
        return `üéØ ${who} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –≤ —Ä–∞—É–Ω–¥–µ ${joinIdx + 1}`;
      });
    if (lines.length) {
      txt += lines.join('\n') + '\n\n';
    }
  }

  bracket.rounds.forEach((round: Round, roundIndex: number) => {
    txt += `–†–∞—É–Ω–¥ ${roundIndex + 1}:\n`;
    round.matches.forEach((match: Match) => {
      const status = match.completed ? '‚úÖ' : '‚è≥';
      if (match.player1.name === 'TBD' || (match.player2 && match.player2.name === 'TBD')) {
        txt += `${status} –û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
      } else if (!match.player2) {
        txt += `${status} ${match.player1.name} (–æ–¥–∏–Ω–æ—á–Ω—ã–π)`;
        if (match.winner) txt += ` ‚Üí ${match.winner.name}`;
        txt += '\n';
      } else {
        txt += `${status} ${match.player1.name} vs ${match.player2.name}`;
        if (match.winner) txt += ` ‚Üí ${match.winner.name}`;
        txt += '\n';
      }
    });
    txt += '\n';
  });

  return txt;
}


/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ¬´—à–∞–ø–∫–∏¬ª —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ/–≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –∏ —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á.
 */
export function buildTournamentHeader(t: Tournament): string {
  const participantsList =
    t.participants.size > 0
      ? Array.from(t.participantNames.values()).map((name, i) => `${i + 1}. ${name}`).join('\n')
      : '_–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç_';

  let msg = `üèÜ –¢–£–†–ù–ò–† üèÜ\n\nüëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${t.organizerName}`;
  if (t.startTime) msg += `\n‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${t.startTime}`;
  msg += `\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (${t.participants.size}):\n${participantsList}`;

  if (t.gameState === 'playing' && t.bracket) {
    msg += '\n\nüèÜ –¢–£–†–ù–ò–†–ù–ê–Ø –°–ï–¢–ö–ê üèÜ\n\n';

    // –ü–ª–∞–Ω/—Ñ–∞–∫—Ç ¬´–≤–∫–ª–µ–µ–∫¬ª bye: –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è, –∏–Ω–∞—á–µ ¬´–ò–≥—Ä–æ–∫ —Å bye¬ª
    if (Array.isArray(t.bracket.byeJoinRounds) && t.bracket.byeJoinRounds.length > 0) {
      const byeLines = [...t.bracket.byeJoinRounds]
        .sort((a, b) => a - b)
        .map((joinIdx) => {
          const p = t.bracket!.byePlayersByJoinRound?.get(joinIdx);
          const who = p ? p.name : '–ò–≥—Ä–æ–∫ —Å bye';
          return `üéØ ${who} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –≤ —Ä–∞—É–Ω–¥–µ ${joinIdx + 1}`;
        });
      if (byeLines.length) msg += byeLines.join('\n') + '\n\n';
    }

    t.bracket.rounds.forEach((round: Round, roundIndex: number) => {
      msg += `–†–∞—É–Ω–¥ ${roundIndex + 1}:\n`;
      round.matches.forEach((match: Match) => {
        const status = match.completed ? '‚úÖ' : '‚è≥';
        if (match.player1.name === 'TBD' || (match.player2 && match.player2.name === 'TBD')) {
          msg += `${status} –û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
        } else if (!match.player2) {
          msg += `${status} ${match.player1.name} (–æ–¥–∏–Ω–æ—á–Ω—ã–π)`;
          if (match.winner) msg += ` ‚Üí ${match.winner.name}`;
          msg += '\n';
        } else {
          msg += `${status} ${match.player1.name} vs ${match.player2.name}`;
          if (match.winner) msg += ` ‚Üí ${match.winner.name}`;
          msg += '\n';
        }
      });
      msg += '\n';
    });

    if (t.currentRound !== undefined && t.currentMatch !== undefined) {
      const cur = safeGetCurrentMatch(t);
      if (cur) {
        const { match, roundIndex } = cur;
        msg += `üéØ –¢–ï–ö–£–©–ò–ô –ú–ê–¢–ß (–†–∞—É–Ω–¥ ${roundIndex + 1}):\n`;
        if (!match.player2) msg += `${match.player1.name} (–æ–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á)`;
        else msg += `${match.player1.name} vs ${match.player2.name}`;

        if (match.player1.roll !== undefined || (match.player2 && match.player2.roll !== undefined)) {
          msg += '\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n';
          if (match.player1.roll !== undefined) msg += `${match.player1.name}: ${match.player1.roll}\n`;
          if (match.player2 && match.player2.roll !== undefined) msg += `${match.player2.name}: ${match.player2.roll}\n`;
        }
      }
    }
  } else {
    msg += '\n\nüéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏–ª–∏ –≤—ã–π—Ç–∏!';
  }

  return msg;
}

/** –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) */
export async function sendTournamentBracket(bot: TelegramBot, chatId: number, t: Tournament) {
  const text = buildBracketText(t);
  if (!text) {
    log('sendTournamentBracket: no bracket text, skip');
    return;
  }
  log('sendTournamentBracket: sending bracket');
  await sendMessageWithRetry(
    bot,
    chatId,
    text,
    { message_thread_id: t.messageThreadId } as TelegramBot.SendMessageOptions
  );
}

/** –°–ª—É–∂–µ–±–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ—Ö–æ–¥/–≤–∫–ª–µ–π–∫–∞/–∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥ */
export async function announceRoundTransition(bot: TelegramBot, chatId: number, t: Tournament) {
  log('announceRoundTransition:', { nextRound: (t.currentRound ?? 0) + 1 });
  await sendMessageWithRetry(
    bot,
    chatId,
    `üîÑ –ü–ï–†–ï–•–û–î –ö –†–ê–£–ù–î–£ ${(t.currentRound ?? 0) + 1}`,
    { message_thread_id: t.messageThreadId } as TelegramBot.SendMessageOptions
  );
}

export async function announceByeJoins(bot: TelegramBot, chatId: number, t: Tournament) {
  log('announceByeJoins');
  await sendMessageWithRetry(
    bot,
    chatId,
    `üéØ –ò–≥—Ä–æ–∫ —Å bye –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —ç—Ç–æ–º—É —Ä–∞—É–Ω–¥—É`,
    { message_thread_id: t.messageThreadId } as TelegramBot.SendMessageOptions
  );
}

export async function announceAutoAdvance(bot: TelegramBot, chatId: number, t: Tournament, playerName: string) {
  log('announceAutoAdvance:', playerName);
  await sendMessageWithRetry(
    bot,
    chatId,
    `üéØ ${playerName} –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ (–æ–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á).`,
    { message_thread_id: t.messageThreadId } as TelegramBot.SendMessageOptions
  );
}

/**
 * –ü—Ä–æ–º–ø—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞: –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É ¬´–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫¬ª.
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–Ω—Ç–∏–¥—É–±–ª–∏-—Ñ–ª–∞–≥–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç id —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞.
 */
export async function promptMatch(bot: TelegramBot, chatId: number, t: Tournament, matchNumber: number) {
  const cur = safeGetCurrentMatch(t);
  if (!cur || !cur.match.player2) {
    log('promptMatch: no current match or single match ‚Äî skip prompt');
    return;
  }

  // —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  t.matchProcessing = false;
  t.matchFinalized = false;
  t.p1Rolled = false;
  t.p2Rolled = false;
  t.currentPromptMessageId = undefined;

  const text = `üéØ –ú–ê–¢–ß ${matchNumber} (–†–∞—É–Ω–¥ ${cur.roundIndex + 1})\n\n${cur.match.player1.name} vs ${cur.match.player2!.name}\n\n–í—ã –¥–æ–ª–∂–Ω—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫!`;
  const keyboard: TelegramBot.InlineKeyboardMarkup = {
    inline_keyboard: [[{ text: 'üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫', callback_data: 'throw_dice' }]],
  };
  log('promptMatch:', { round: cur.roundIndex + 1, match: matchNumber, p1: cur.match.player1.name, p2: cur.match.player2?.name });

  const sent = await sendMessageWithRetry(
    bot,
    chatId,
    text,
    {
      reply_markup: keyboard,
      message_thread_id: t.messageThreadId,
    } as TelegramBot.SendMessageOptions
  );

  t.currentPromptMessageId = sent?.message_id;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥/–º–∞—Ç—á –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã ¬´—É–µ—Ö–∞–ª–∏¬ª.
 */
export function safeGetCurrentMatch(
  t: Tournament
): { round: Round; match: Match; roundIndex: number; matchIndex: number } | null {
  const bracket = t.bracket;
  const rIdx = t.currentRound;
  const mIdx = t.currentMatch;
  if (!bracket || rIdx == null || mIdx == null) return null;
  if (rIdx < 0 || rIdx >= bracket.totalRounds) return null;

  const round: Round | undefined = bracket.rounds[rIdx];
  if (!round) return null;
  if (mIdx < 0 || mIdx >= round.matches.length) return null;

  const match: Match = round.matches[mIdx];
  return { round, match, roundIndex: rIdx, matchIndex: mIdx };
}
